<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>/develop-notes/feed.atom</id>
  <updated>2012-01-05T00:00:00Z</updated>
  <link href="/develop-notes/" />
  <link href="/develop-notes/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="/develop-notes/feed.atom">
    <title type="text">客户端不同网站间交互实现记录</title>
    <id>/develop-notes/2012/01/05/different-sites-communication-on-clientside</id>
    <updated>2012-01-05T00:00:00Z</updated>
    <link href="/develop-notes/2012/01/05/different-sites-communication-on-clientside" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;起个名字真难. 没有标题说的那么大而全, 只是记录下简单自己在2011后半年遇见的几个交互实现.&lt;/p&gt;
&lt;div class="section" id="javascript"&gt;
&lt;h2&gt;JavaScript生成链接&lt;/h2&gt;
&lt;p&gt;Delicious, weibo的分享按钮.&lt;/p&gt;
&lt;p&gt;这一类是最常见的. JavaScript获取需要的信息, 构建链接, 用window.open打开新窗口.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iframe"&gt;
&lt;h2&gt;服务器生成iframe&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://readitlaterlist.com/api/buttons"&gt;ReadItLater Button&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaScript生成一iframe插入当前页面, 把需要保持的信息放在iframe上src的链接参数中, 让RIL服务器根据参数值动态生成交互按钮返回作为iframe的内容. 因为使用的是iframe, RIL可以判断用户是否处于登陆状态(根据cookie), 去决定返回让用户点击的时候跳转登陆的按钮, 还是直接POST进行保存内容的按钮, 还是提示用户当前页面处于&amp;quot;已记录&amp;quot;状态. 在生成iframe的一刻已经决定了交换的内容, 尔后进行交换时互不干涉.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="javascriptiframe"&gt;
&lt;h2&gt;JavaScript生成iframe&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.instapaper.com"&gt;Instapaper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instapaper的&amp;quot;Read Later&amp;quot;按钮, 也是生成iframe. 不过iframe里面需要交换的内容, 是本地js设定的. 服务器返回了iframe的内容模板字符串, 本地js获取需要的值根据模板生成目标内容, 由本地js直接写不带src的iframe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="html5"&gt;
&lt;h2&gt;HTML5&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://developer.mozilla.org/en/DOM/window.postMessage"&gt;HTML5 window.postMessage&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
window.postMessage is a method for safely enabling cross-origin communication.
&lt;/pre&gt;
&lt;p&gt;没实际去应用过, 这个算是HTML5提供的官方解决方案了.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flash"&gt;
&lt;h2&gt;Flash&lt;/h2&gt;
&lt;p&gt;Diigo, WebNotes提供嵌入当前页面的工具条. 没有认真拆解过, 但确认其没用到Html5特性. 而且两个都属于有后续有不确定交互发生的存在, 由于iframe设定是&amp;quot;上下文无关&amp;quot;. 那猜想应该是用了flash. &lt;a class="reference external" href="http://www.adobe.com/devnet/flash/articles/external_interface.html"&gt;Using the External API for Flash-JavaScript Communication&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;直接请求&lt;/h2&gt;
&lt;p&gt;WebNotes的工具条, 刚才用Firebug测了下, 不是Flash. (内置的flash显示时timer, 不知道时用了干啥的, 心跳包?). 对于HighLighting触发时, 是一GET请求, 带好长的一段编码/加密过的参数. 然后返回一JS, try{...}catch(e){}&lt;/p&gt;
&lt;p&gt;updated: &amp;lt;!-- Fri Jan  6 14:33:07 CST 2012 --&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

