<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://tukki.github.io/develop-notes/feed.atom</id>
  <updated>2012-04-28T00:00:00Z</updated>
  <link href="http://tukki.github.io/develop-notes/" />
  <link href="http://tukki.github.io/develop-notes/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Using SQLAlchemy in Django</title>
    <id>http://tukki.github.io/develop-notes/2012/04/28/using-sqlalchemy-in-django</id>
    <updated>2012-04-28T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/04/28/using-sqlalchemy-in-django" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;现在的工程还是基于Django, 不过ORM部分已经确认用SQLAlchemy了. 现在也建了一层DAL来管理数据非业务相关的实现, 看接口定义, 有点像让粒度小一点. 提供复用&lt;/p&gt;
&lt;pre class="literal-block"&gt;
UserDAL.get_user_by_id(id)
ActionDAL.action(user_id, value)
&lt;/pre&gt;
&lt;p&gt;首先有个想法, 想让Session在request-response周期内自动管理transcations, 自然得动用Middleware. 有点懒, 直接上代码(未完整测试).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.functional&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;somewhere&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_cached_dbSession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;#http://docs.sqlalchemy.org/en/latest/orm/session.html#committing&lt;/span&gt;
        &lt;span class="c"&gt;#In autocommit mode, a transaction can be initiated by calling the begin() method.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_cached_dbSession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SQLAlchemySessionMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt;
           &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用了SimpleLazyObject来管理request.dbSession是考虑到并非每个request都会用到dbSession, 就直接懒惰处理.&lt;/p&gt;
&lt;p&gt;像是解决问题了.&lt;/p&gt;
&lt;p&gt;两个困惑. 1)是不是需要用request.dbSession初始化DAL/参数传入; 2)如果不传值, 如何做到DALs上面能共用一个Session上下文.&lt;/p&gt;
&lt;p&gt;记得以前用Pyramid的时候也有遇到这个情况. 只是没总结好. 今晚回来好好查了下SQLAlchemy的文档, 找到似曾相似的 &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/latest/orm/session.html#contextual-thread-local-sessions"&gt;Contextual/Thread-local Sessions&lt;/a&gt;, 使用scoped_session:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
By default, this context is the current thread.
&lt;/pre&gt;
&lt;p&gt;查查已有实现, 才发现现在定义的Session只是sessionmaker()出来. 改用scoped_session, 上面两个疑惑一并解决了吧.&lt;/p&gt;
&lt;p&gt;如果不是dbSession.begin(). 应该会忽略以下一个问题: 这个Middleware是否导致Session的Transaction太长了? 而且transaction的使用也不灵活. 再者, scoped_session的使用, 已经可以让整个Middleware实现无用化, 用错方法来解决问题了.&lt;/p&gt;
&lt;p&gt;现在想, 或在一个view级别的decorators足够了, django.db.transaction.commit_on_success. 再者, 过度设计了. 现在的系统需要用到transaction了吗?&lt;/p&gt;
&lt;p&gt;&amp;lt;Sat Apr 28 02:07:45 CST 2012&amp;gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">在SQLAlchemy使用Postgresql的Array类型</title>
    <id>http://tukki.github.io/develop-notes/2011/11/12/the-postgresql-array-type-on-sqlalchemy</id>
    <updated>2011-11-12T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2011/11/12/the-postgresql-array-type-on-sqlalchemy" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.dialects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;postgresql&lt;/span&gt;

&lt;span class="n"&gt;demo_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uids&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postgresql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                 &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;demo_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;定义表结果(?)时, 指定mutable=True, 才能使对uids的直接调用append等方法的修改生效, 否则flush/commit时不会更新数据库, 即使手动调用&amp;quot;instance_state(object).modified=True&amp;quot;. 除非每次都 &lt;em&gt;demo.uids = new_list&lt;/em&gt;. (使用版本0.7.1)&lt;/li&gt;
&lt;li&gt;demo_table的uids在上面的定义是允许存在nullable. 不保存数据和保存空列表时两个不同的情况. 在postgresql, array的保存格式为 &amp;quot;{,,,,}&amp;quot;&lt;/li&gt;
&lt;li&gt;postgresql支持SQL2003标准下的Array, Mysql还至今没有支持
&lt;a class="reference external" href="http://forge.mysql.com/worklog/task.php?id=2081"&gt;http://forge.mysql.com/worklog/task.php?id=2081&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[Sat Nov 12 01:43:09 CST 2011]&lt;/p&gt;
</content>
  </entry>
</feed>

