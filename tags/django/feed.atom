<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://tukki.github.io/develop-notes/feed.atom</id>
  <updated>2012-04-28T00:00:00Z</updated>
  <link href="http://tukki.github.io/develop-notes/" />
  <link href="http://tukki.github.io/develop-notes/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Notes for Middleware</title>
    <id>http://tukki.github.io/develop-notes/2012/04/03/notes-for-middleware</id>
    <updated>2012-04-03T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/04/03/notes-for-middleware" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;还没认真地去看PEP333, 只是记录&lt;/p&gt;
&lt;p&gt;以前用django的时候, 没有区分好其内置的 &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/http/middleware"&gt;Django Middleware&lt;/a&gt; 和标准下的 &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0333/#id17"&gt;WSGI Middleware&lt;/a&gt;. 直到离开过Django, 才明白为什么叫 &amp;quot;Django lets you write web apps in Django&amp;quot;&lt;/p&gt;
&lt;p&gt;django把wsgi隐藏的太好了. 以致我曾认为wsgi就是django这样的. environ真的很少用到.&lt;/p&gt;
&lt;p&gt;现在看来, django的middleware是对wsgi的middleware在django层面的再封装, 提供django-like的实现方式: process_request, proces_response, etc. 模仿PJE的说法 &lt;a class="reference external" href="http://dirtsimple.org/2007/02/wsgi-middleware-considered-harmful.html"&gt;If your appkication requires that API to be present, then it's not middleware any more!&lt;/a&gt;, django的middleware更多时候, 是application的一部分, 其复用程度, 局限于django工程.&lt;/p&gt;
&lt;p&gt;这里匆忙找到的两篇博文, &lt;a class="reference external" href="http://www.evanfosmark.com/2008/12/python-wsgi-middleware-for-automatic-gzipping/"&gt;Python WSGI Middleware for automatic Gzipping&lt;/a&gt; 介绍了如何写WSGI标准的Middleware; &lt;a class="reference external" href="http://eflorenzano.com/blog/2008/11/17/wsgi-middlware-awesome-django-use-it-more/"&gt;WSGI Middleware is Awesome, and Django Should Use It More&lt;/a&gt;, 介绍1.4之前如何整合django和其他Middleware实现.&lt;/p&gt;
&lt;p&gt;对于WSGI, 在django的1.4出来后更好的支持, &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/releases/1.4/#improved-wsgi-support"&gt;Improved WSGI support&lt;/a&gt;, 或者, django要回归WSGI生态圈了, 事实上, 我不确认django是否离开过&lt;/p&gt;
&lt;p&gt;&amp;lt;Tue Apr  3 22:07:13 CST 2012&amp;gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Using SQLAlchemy in Django</title>
    <id>http://tukki.github.io/develop-notes/2012/04/28/using-sqlalchemy-in-django</id>
    <updated>2012-04-28T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/04/28/using-sqlalchemy-in-django" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;现在的工程还是基于Django, 不过ORM部分已经确认用SQLAlchemy了. 现在也建了一层DAL来管理数据非业务相关的实现, 看接口定义, 有点像让粒度小一点. 提供复用&lt;/p&gt;
&lt;pre class="literal-block"&gt;
UserDAL.get_user_by_id(id)
ActionDAL.action(user_id, value)
&lt;/pre&gt;
&lt;p&gt;首先有个想法, 想让Session在request-response周期内自动管理transcations, 自然得动用Middleware. 有点懒, 直接上代码(未完整测试).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.functional&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;somewhere&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_cached_dbSession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c"&gt;#http://docs.sqlalchemy.org/en/latest/orm/session.html#committing&lt;/span&gt;
        &lt;span class="c"&gt;#In autocommit mode, a transaction can be initiated by calling the begin() method.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_cached_dbSession&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_cached_dbSession&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SQLAlchemySessionMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleLazyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_dbSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="n"&gt;dbSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dbSession&lt;/span&gt;
           &lt;span class="n"&gt;dbSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用了SimpleLazyObject来管理request.dbSession是考虑到并非每个request都会用到dbSession, 就直接懒惰处理.&lt;/p&gt;
&lt;p&gt;像是解决问题了.&lt;/p&gt;
&lt;p&gt;两个困惑. 1)是不是需要用request.dbSession初始化DAL/参数传入; 2)如果不传值, 如何做到DALs上面能共用一个Session上下文.&lt;/p&gt;
&lt;p&gt;记得以前用Pyramid的时候也有遇到这个情况. 只是没总结好. 今晚回来好好查了下SQLAlchemy的文档, 找到似曾相似的 &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/latest/orm/session.html#contextual-thread-local-sessions"&gt;Contextual/Thread-local Sessions&lt;/a&gt;, 使用scoped_session:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
By default, this context is the current thread.
&lt;/pre&gt;
&lt;p&gt;查查已有实现, 才发现现在定义的Session只是sessionmaker()出来. 改用scoped_session, 上面两个疑惑一并解决了吧.&lt;/p&gt;
&lt;p&gt;如果不是dbSession.begin(). 应该会忽略以下一个问题: 这个Middleware是否导致Session的Transaction太长了? 而且transaction的使用也不灵活. 再者, scoped_session的使用, 已经可以让整个Middleware实现无用化, 用错方法来解决问题了.&lt;/p&gt;
&lt;p&gt;现在想, 或在一个view级别的decorators足够了, django.db.transaction.commit_on_success. 再者, 过度设计了. 现在的系统需要用到transaction了吗?&lt;/p&gt;
&lt;p&gt;&amp;lt;Sat Apr 28 02:07:45 CST 2012&amp;gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">why django? why not django?</title>
    <id>http://tukki.github.io/develop-notes/2011/11/27/why-django-why-not-django</id>
    <updated>2011-11-27T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2011/11/27/why-django-why-not-django" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
The Web framework for perfectionisits with deadlines.
Django makes it easier to build better Web apps more quickly and with less code.
&lt;/pre&gt;
&lt;p&gt;ps. Django的发音, 'JANG-oh. The “D” is silent'. &lt;a class="reference external" href="http://red-bean.com/~adrian/django_pronunciation.mp3"&gt;示例&lt;/a&gt;, 我承认我这一年都发错音了, 羞大了&lt;/p&gt;
&lt;p&gt;啄木鸟社区的 &lt;a class="reference external" href="http://wiki.woodpecker.org.cn/moin/PyWebFrameVs"&gt;Pythonic Web 应用平台对比&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="why-django"&gt;
&lt;h2&gt;why Django&lt;/h2&gt;
&lt;p&gt;但是冲着 &amp;quot;Django focuses on automating as much as possible and adhering to the DRY principle&amp;quot;一个DRY就可以考虑Django.&lt;/p&gt;
&lt;p&gt;有一站式超详细的 &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/"&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有深入浅出, 用例子引导学习的 &lt;a class="reference external" href="http://www.djangobook.com/"&gt;The Django Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有超多的pluggable apps, &lt;a class="reference external" href="http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=django&amp;amp;submit=search"&gt;pypi&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; 就是一应常备的武器.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/#other-batteries-included"&gt;内置电池&lt;/a&gt; 也超多. 特别是其 &lt;em&gt;Admin site&lt;/em&gt; 超级好用, 如果只是对数据进行CURD, 完全可以利用按内置的 &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.3/howto/legacy-databases/"&gt;Auto-generate the models&lt;/a&gt; 反射生成models, 再用'Admin site'进行数据管理.&lt;/p&gt;
&lt;p&gt;还有强大的社区. 可以说&amp;quot;你遇到的问题很少可能是最新的&amp;quot;.&lt;/p&gt;
&lt;p&gt;不负责任地说, 只要有学过Python的基本语法和数据类型, 靠官方文档和The Django Book就开始建立自己的网站.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-django"&gt;
&lt;h2&gt;why not Django?&lt;/h2&gt;
&lt;p&gt;Django is great, but why not? 用 &lt;a class="reference external" href="http://stackoverflow.com/users/95274/ben-bangert"&gt;Ben Bangert&lt;/a&gt; 的话来回答: 'It readlly depends on the type of application you're building.' Django再强大也不可能满足所有的需求.&lt;/p&gt;
&lt;p&gt;用Pylons来作对比&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/48681/pros-cons-of-django-vs-pylons"&gt;Pros/Cons of Django vs Pylons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.mutualinformation.org/2010/03/why-i-switched-to-pylons-after-using-django-for-six-months/"&gt;Why I switched to Pylons after using Django for six months&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jordanovski.com/django-vs-pylons"&gt;Django vs Pylons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="diffle-history.blogspot.com/2007/12/pylons-and-django.html"&gt;pylons-and-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;============ 分割线 ====================&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;以下尽量时自己经验&lt;/h2&gt;
&lt;div class="section" id="model"&gt;
&lt;h3&gt;Model&lt;/h3&gt;
&lt;p&gt;why Django?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不熟悉SQL, 也不需要负责的查询, Just Django. 定义表结构简单, CURD简单.&lt;/p&gt;
&lt;p&gt;对应复杂的查询可以用 &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects"&gt;Q&lt;/a&gt;, 还可以直接用 &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/db/sql/"&gt;raw SQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;支持表继承. 而且带proxy模式. 用proxy模式改变数据行为很好用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;why not Django?&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;我不明确Django对于复杂的查询的支持程度, 还是自己在设计上面出发点就错了, 不过在自定义Join查询方面自己曾经头痛过.&lt;/p&gt;
&lt;p&gt;因为Django, 学会了写数据库视图, 知道了有&amp;quot;物化视图&amp;quot;的实现, 甚至思考过, 好的分离, 是数据使用者根本不需要知道下面的是视图还是实表.&lt;/p&gt;
&lt;p class="last"&gt;在用了SQLAlchemy后, 如果再遇到数据库操作较复杂, 且没有数据库程序员这个角色的话, 再用Django会列个一二三对比后才决定&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="template"&gt;
&lt;h3&gt;Template&lt;/h3&gt;
&lt;p&gt;why Django&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Django template language 很明显地区分为 &amp;quot;For designers&amp;quot; 和 &amp;quot;For programmmers&amp;quot;.
个人陋见, 对于Designer(D)角色, 不用懂Python, 只需用学习Django的tags和filters的用法即可, 如果需要什么, 让Programmer(P)角色提供, 不管是数据还是方法.
而P角色只要好好地去理解template的Node和Context就能写出合适的tag和filter.&lt;/p&gt;
&lt;p&gt;其中 &lt;em&gt;inclusion_tag&lt;/em&gt; 在DP同在的情况下, 建议还是少用. 虽然超级好用, 比继承Node然后重写render返回数据让D调用快多了. 但维护成本增大了. 页面是多变的, 把&amp;quot;_header.html&amp;quot;固化在tag文件夹里面了, D角色改页面的时候还得去程序文件里面找对应的对用. 还不如用普通的tag返回数据然后让D角色自己 &lt;em&gt;include&lt;/em&gt; 一次&amp;quot;_header.html&amp;quot;. 管页面以后变成&amp;quot;_wft.html&amp;quot;, 与数据无关, 与P角色无关. 当然, DP两个角色都是你的话, 自己衡量吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;why not Django&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 文档里面有句&amp;quot;Web designers (as opposed to developers)&amp;quot;. 很明显的定位, 页面设计师和程序员是对立的~. 如果只有你自己一个人, 准备分演两个角色吧.&lt;/p&gt;
&lt;p&gt;内置的Template也是能替换的, &lt;a class="reference external" href="http://lethain.com/replacing-django-s-template-language-with-jinja2/"&gt;Replacing django's template language with jinja2&lt;/a&gt;, 但替换意味着很多contrib或者app不能直接使用了.&lt;/p&gt;
&lt;p&gt;Python世界还有很多html template实现. &lt;a class="reference external" href="http://jinja.pocoo.org/docs"&gt;Jinja2&lt;/a&gt;, &lt;a class="reference external" href="http://www.makotemplates.org/"&gt;Mako&lt;/a&gt;, &lt;a class="reference external" href="http://genshi.edgewall.org/"&gt;Genshi&lt;/a&gt; 等等等等. Jinja2的语法和DjangoTemplate的就差不了多少, 过渡成本不高. Mako甚至可以把Python像PHP一样用... Django外面的世界也很精彩, 例如想用适合自己的实现, Django可能就不是满足这类需求的实现.  不过, 如果遵循MVC或者工程小, 用什么Template区别不大, 甚至可以考虑让客户端js来渲染大部分页面.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="form"&gt;
&lt;h3&gt;Form&lt;/h3&gt;
&lt;p&gt;Django的Form是一体化的, 包含了html生成, 数据校验等. 当然也可以自定义html, 不管是自定义widget还是在template上. 自己来说, 不喜欢这种一体化来用. 后台做好数据校验就行, 不需要考虑页面上数据时怎样显示的.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-together"&gt;
&lt;h3&gt;All Together&lt;/h3&gt;
&lt;p&gt;自己认同的一句: Django, 简单用很简单, 复杂用很负责.&lt;/p&gt;
&lt;p&gt;如果只有一个人担当多个角色, 用Django吧. 一站式服务. 如果有多个人担当多个角色, 也用Django吧. Django的学习成本不高, 沟通容易.&lt;/p&gt;
&lt;p&gt;如果你想多点控制, 多点选择, 还是不要Django了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;跑题, 其他几个框架的一句话说明&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pylonshq.com/"&gt;Pylons&lt;/a&gt; a lightweight Web framework emphasizing flexibility and rapid development.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;, Web development with style, your way!
&lt;a class="reference external" href="http://www.tornadoweb.org/"&gt;Tornado&lt;/a&gt; is an open source version of the scalable, non-blocking web server and tools that power FriendFeed.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bfg.repoze.org/"&gt;Repoze.BFG&lt;/a&gt; is a 'pay only for what you eat' Python web framework.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://webpy.org/"&gt;web.py&lt;/a&gt;, is a web framework for Python that is as simple sa it is powerful.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, web development, one drop at at time.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.turbogears.org/"&gt;TurboGears&lt;/a&gt;, The next generation web framework that scales with you.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/defnull/bottle/wiki"&gt;Bottle&lt;/a&gt; is a fast and simple micro-framework for small web-applications.&lt;/p&gt;
&lt;p&gt;更多 Python Web Framework 查看 &lt;a class="reference external" href="http://wiki.python.org/moin/WebFrameworks"&gt;python wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- update: Fri Dec 2 00:03:02 CST 2011 --&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

