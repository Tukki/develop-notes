<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://tukki.github.io/develop-notes/feed.atom</id>
  <updated>2013-06-20T00:00:00Z</updated>
  <link href="http://tukki.github.io/develop-notes/" />
  <link href="http://tukki.github.io/develop-notes/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">github page finally</title>
    <id>http://tukki.github.io/develop-notes/2013/06/20/github-page-finally</id>
    <updated>2013-06-20T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2013/06/20/github-page-finally" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;dotcloud忘记什么时候不能部署免费的静态blog了... 所以最终还是迁移到了github page&lt;/p&gt;
&lt;p&gt;继续沿用rstblog系统生成html. 为适应github page的约定作了写代码上面的修改和makefile的变更. style文件不支持underscore前缀, 域名带prefix_path. 看这原代码摸索着改.&lt;/p&gt;
&lt;p&gt;两晚大概4个小时不到. 成功迁移. 较长一段时间内不用再迁移了.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">using sequence to generate global_id</title>
    <id>http://tukki.github.io/develop-notes/2013/05/25/using-sequence-to-generate-global_id</id>
    <updated>2013-05-25T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2013/05/25/using-sequence-to-generate-global_id" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;使用 &lt;a class="reference external" href="http://www.postgresql.org/docs/9.2/interactive/sql-createsequence.html"&gt;Postgresql Sequence&lt;/a&gt; 作为global_id生成器&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果也需要预加载id到应用层, 可以使用 next_id = select setval('seq', currval('seq')+10);&lt;/p&gt;
&lt;p&gt;同事的mysql版本:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="k"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;ss_id_generator&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MyISAM&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000008501&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;CHARSET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;latin1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用的是 LAST_INSERT_ID 进行id管理, 并预加载id到应用层缓冲. 还需要注意应用层资源管理, 加锁.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;update ss_id_generator set next_id=LAST_INSERT_ID(next_id+&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fetch_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;select LAST_INSERT_ID() as next_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;next_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fetch_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;global_id 不应该rollback.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;用mysql实现, 尽量用myisam, 用innodb是可以rollback的.&lt;/li&gt;
&lt;li&gt;用postgresql的Sequence, non-transactional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;用Sequence不用写应用层优化多取id避免数据库读写频繁, 带cache选项&lt;/dt&gt;
&lt;dd&gt;the optional clause CACHE cache specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;用mysql的版本, 需要在应用层缓存多个id, 然后利用线程锁管理. 实现起来麻烦度增加.&lt;/p&gt;
&lt;p&gt;使用Sequence也避免了mysql版本导致的id浪费. (N个实例有N*m(缓冲数)个id预生成)&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Sequence也可以一次取多个出来缓存. 也有更强大但复杂的版本&lt;/dt&gt;
&lt;dd&gt;select nextval('seq') from generate_series(1, 1000);&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;如果用PostgreSQL做db backend, 用Sequence跨表, 无需应用层协助.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;SEQUENCE&lt;/span&gt; &lt;span class="n"&gt;common_fruit_id_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;apples&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;      &lt;span class="n"&gt;INT4&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;common_fruit_id_seq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt;   &lt;span class="nb"&gt;NUMERIC&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;oranges&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="n"&gt;id&lt;/span&gt;      &lt;span class="n"&gt;INT4&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="n"&gt;nextval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;common_fruit_id_seq&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;weight&lt;/span&gt;  &lt;span class="nb"&gt;NUMERIC&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mysql 记录数据 + postgreql sequence global_id 组合也不错. 各司其职&lt;/p&gt;
&lt;p&gt;有用的链接:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.postgresql.org/docs/9.2/interactive/sql-createsequence.html"&gt;PostgreSQL create sequence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.depesz.com/2008/03/20/getting-multiple-values-from-sequences/"&gt;getting multiple values from sequences&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.neilconway.org/docs/sequences/"&gt;FAQ: Using Sequences in PostgresSQL&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">note for PIL</title>
    <id>http://tukki.github.io/develop-notes/2013/01/23/note_for_pil</id>
    <updated>2013-01-23T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2013/01/23/note_for_pil" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;这次, 在 &lt;a class="reference external" href="https://github.com/amueller/word_cloud"&gt;word_cloud&lt;/a&gt; 基础上面, 进行改动. 虽然还有改不动的地方, 记录收获到的东西. 备忘.  同时多接触了一个库, numpy.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;unicode support&lt;/p&gt;
&lt;p&gt;ImageDraw.text 默认不支持中文(可能时系统问题), 需要指定合适的font, 用truetype类型指定大小输出即可. 一开始折腾没在意, 各种unicode/str转换, 输出一堆乱码.
在stackoverflow找到解决方法, 字库!! 后来找美工给了两个字库, hy2gjim.ttf/msyh.ttf.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;字体旋转&lt;/p&gt;
&lt;p&gt;用ImageFont.TransposedFont,  可以指定orientaiton把文字旋转处理, 再draw.text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;单词/句子的实际大小&lt;/p&gt;
&lt;p&gt;一个时font.getsize(), 另外一个时draw.textsize()
前者时获取字体的width/height.
后者在setfont后, 获取的时输出时占用的空间. box_size&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;输出换行&lt;/p&gt;
&lt;p&gt;draw.text()不负责处理换行.. 处理英文可以用 &lt;a class="reference external" href="http://docs.python.org/2/library/textwrap.html"&gt;textwrap&lt;/a&gt;,  在stackoverflow有 &lt;a class="reference external" href="http://stackoverflow.com/questions/7698231/python-pil-draw-multiline-text-on-image"&gt;demo&lt;/a&gt;
中文没化时间找更好的方法. 因为每行的长度差不多, 换行可能就只有几个字, 比较挫地直接由最后一个字重试, 取整句话的实际输出长度, 再判断是否过长, 往前遍历截取. 知道满足. 后面截断的就再换行重试.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;圆角处理.&lt;/p&gt;
&lt;p&gt;找到这篇文章 &lt;a class="reference external" href="http://tobias.klpstn.com/2008/02/10/simple-image-masking-with-pil/"&gt;Simple Image masking with PIL&lt;/a&gt;, 其实原理没来得及搞明白. 利用浮层遮盖?  不知道找到圆角边框不够圆滑, 还是没抄到其中的主要意思, 效果不好... 没成.
ps. 这里可以先合并大图再进行缩略. 这样不用换一个比例找一个图层.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;图片合并&lt;/p&gt;
&lt;p&gt;用 Image.paste, 有先后顺序, 同一位置后面覆盖前面. 油画~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Iteration within re.sub()</title>
    <id>http://tukki.github.io/develop-notes/2012/12/07/iteration-with-re-sub</id>
    <updated>2012-12-07T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/12/07/iteration-with-re-sub" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;今天有个re.sub()相关实现需要在替换字符串的时候附加位移信息进去, 用来标识其是第几次出现.&lt;/p&gt;
&lt;p&gt;查文档函数不支持!  全局变量统计当然可以, 比较丑陋. 想到了闭包, 在函数里面定义函数以访问外层函数的变量, JS的话应该时可以的, 只是python的闭包好像不是这样的, 什么地方理解错了.&lt;/p&gt;
&lt;p&gt;还是Google给力, 问题不是新的. 找到同样的需求. &lt;cite&gt;http://bytes.com/topic/python/answers/39307-iteration-within-sub&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;构建类, 用类方法提供给sub作为替换行数... first class? 基础概念都忘了...&lt;/p&gt;
&lt;p&gt;摘录代码片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;match_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;repl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;

&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abbabababbbbbaaa&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;expected&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a01a2a3a45678aaa&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ptn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;(b)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">weibo api http400 错误</title>
    <id>http://tukki.github.io/develop-notes/2012/10/17/weibo_api_http400</id>
    <updated>2012-10-17T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/10/17/weibo_api_http400" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;sina weibo api 在请求错误时返回错误信息json, 但http code不是200. 现在看来也合情合理. 错误请求, 当然返回错误代号.&lt;/p&gt;
&lt;p&gt;只是, 用python默认的urllib2来发送请求, 默认只处理100-400之间的codes. 所以,  http400这些错误还得自己来.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URLError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weiboapi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;HTTPError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wget也是没有处理这个http400错误. curl倒是有. requests也处理了. 在status_code.py里面有定义.&lt;/p&gt;
&lt;p&gt;现在有个没定位的问题, 为什么用requests发送部分请求时总是成功, 但用urllib2就抛错误. 这个得再跟进下.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.voidspace.org.uk/python/articles/urllib2.shtml#error-codes"&gt;这里&lt;/a&gt; 个code对应表:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Table mapping response codes to messages; entries have the
# form {code: (shortmessage, longmessage)}.
responses = {
 100: ('Continue', 'Request received, please continue'),
 101: ('Switching Protocols',
       'Switching to new protocol; obey Upgrade header'),

 200: ('OK', 'Request fulfilled, document follows'),
 201: ('Created', 'Document created, URL follows'),
 202: ('Accepted',
       'Request accepted, processing continues off-line'),
 203: ('Non-Authoritative Information', 'Request fulfilled from cache'),
 204: ('No Content', 'Request fulfilled, nothing follows'),
 205: ('Reset Content', 'Clear input form for further input.'),
 206: ('Partial Content', 'Partial content follows.'),

 300: ('Multiple Choices',
       'Object has several resources -- see URI list'),
 301: ('Moved Permanently', 'Object moved permanently -- see URI list'),
 302: ('Found', 'Object moved temporarily -- see URI list'),
 303: ('See Other', 'Object moved -- see Method and URL list'),
 304: ('Not Modified',
       'Document has not changed since given time'),
 305: ('Use Proxy',
       'You must use proxy specified in Location to access this '
       'resource.'),
 307: ('Temporary Redirect',
       'Object moved temporarily -- see URI list'),

 400: ('Bad Request',
       'Bad request syntax or unsupported method'),
 401: ('Unauthorized',
       'No permission -- see authorization schemes'),
 402: ('Payment Required',
       'No payment -- see charging schemes'),
 403: ('Forbidden',
       'Request forbidden -- authorization will not help'),
 404: ('Not Found', 'Nothing matches the given URI'),
 405: ('Method Not Allowed',
       'Specified method is invalid for this server.'),
 406: ('Not Acceptable', 'URI not available in preferred format.'),
 407: ('Proxy Authentication Required', 'You must authenticate with '
       'this proxy before proceeding.'),
 408: ('Request Timeout', 'Request timed out; try again later.'),
 409: ('Conflict', 'Request conflict.'),
 410: ('Gone',
       'URI no longer exists and has been permanently removed.'),
 411: ('Length Required', 'Client must specify Content-Length.'),
 412: ('Precondition Failed', 'Precondition in headers is false.'),
 413: ('Request Entity Too Large', 'Entity is too large.'),
 414: ('Request-URI Too Long', 'URI is too long.'),
 415: ('Unsupported Media Type', 'Entity body in unsupported format.'),
 416: ('Requested Range Not Satisfiable',
       'Cannot satisfy request range.'),
 417: ('Expectation Failed',
       'Expect condition could not be satisfied.'),

 500: ('Internal Server Error', 'Server got itself in trouble'),
 501: ('Not Implemented',
       'Server does not support this operation'),
 502: ('Bad Gateway', 'Invalid responses from another server/proxy.'),
 503: ('Service Unavailable',
       'The server cannot process the request due to a high load'),
 504: ('Gateway Timeout',
       'The gateway server did not receive a timely response'),
 505: ('HTTP Version Not Supported', 'Cannot fulfill request.'),
 }
&lt;/pre&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">python requests 设置POST编码方式</title>
    <id>http://tukki.github.io/develop-notes/2012/09/02/python-requests-form-encode</id>
    <updated>2012-09-02T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/09/02/python-requests-form-encode" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;源于一个使用的错误, 然后挖了一下requests的源码.&lt;/p&gt;
&lt;p&gt;想用requests发个带图片的微博. 要用到 &lt;a class="reference external" href="http://open.weibo.com/wiki/2/statuses/upload"&gt;upload&lt;/a&gt; 接口, 注意事项时使用&amp;quot;multipart/form-data&amp;quot;编码方式.&lt;/p&gt;
&lt;p&gt;先是按其文档上面的说明, 使用files的方式进行文件发送&lt;/p&gt;
&lt;!-- sourcecode: python

&gt;&gt;&gt; files = {'file': ('pic', open('test.jpg', 'rb'))}
&gt;&gt;&gt; r = requests.post(url, data=data, files=files) --&gt;
&lt;p&gt;返回错误. 以为必需把pic放到data里面进行发送. 该过来尝试了一次. 报headers不支持. &lt;a class="reference external" href="http://docs.python-requests.org/en/latest/user/quickstart/#custom-headers"&gt;支持Custom Headers&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; headers = {'content-type': 'multipart/form-data'}
&amp;gt;&amp;gt;&amp;gt; r = requests.post(url, data=data, headers=headers)
&lt;/pre&gt;
&lt;p&gt;还是不行. 散弹式寻找答案, 甚至以为要自己 &lt;a class="reference external" href="http://code.activestate.com/recipes/146306-http-client-to-post-using-multipartform-data/"&gt;设置BOUNDARY&lt;/a&gt;. 不过这样就不像Requests了.&lt;/p&gt;
&lt;p&gt;在requests的 &lt;a class="reference external" href="https://github.com/kennethreitz/requests/issues/737"&gt;issues&lt;/a&gt; 看到这样一个示例:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print post('http://httpbin.org/post', data={'X': 'a'}, files={'X': open('/etc/hosts')}).content
&lt;/pre&gt;
&lt;p&gt;原来最开始的错误只是... 用错方式来指定文件的名字了?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; files = {'pic': open('test.jpg', 'rb')}
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;再post就可以了. 成功发送图片微博&lt;/p&gt;
&lt;p&gt;于是想看看requests这部分的实现是怎样的. 在models.py里面的send函数:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_encode_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_encode_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;builtin_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;application/x-www-form-urlencoded&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Add content-type if it wasn&amp;#39;t explicitly provided.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在有files字段的时候调用的_encode_file会encode_multipart_formdata. 而只有data情况下, 使用的是 urlencode, 并且把content_type设为&amp;quot;application/x-www-form-urlencoded&amp;quot;.&lt;/p&gt;
&lt;p&gt;这就解析了为什么我把pic放到data里面, 并强制设置headers都不行.. 得到的headers值根本就是不符合规定的.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">jQuery Attribute Selector Error</title>
    <id>http://tukki.github.io/develop-notes/2012/07/04/jquery-attribute-selector-error</id>
    <updated>2012-07-04T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/07/04/jquery-attribute-selector-error" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;简单记录一个jquery1.7.2在IE上面的错误, 或在说是差异, 备忘.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[data-toggle=&amp;#39;sns_platform&amp;#39;][name=&amp;#39;sina_weibo&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用 &lt;a class="reference external" href="http://api.jquery.com/attribute-equals-selector/"&gt;attribute equals selector&lt;/a&gt; 进行标签选定. 在chrome/FF上面work well. 但后来发现在IE上面不生效.&lt;/p&gt;
&lt;p&gt;当只有一个attribute选择, 能行. 最后没找到合适的错误原因. 直接改在父标签里面选择具体的name来绑定事件.&lt;/p&gt;
&lt;p&gt;现在看来, 原来的html结构就不够高效. 加了太多的重复标签. 或在这样会更好&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sns_platform&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sina_weibo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sina&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;qq_weibo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;QQ&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样, 再用上&amp;quot;on&amp;quot;, 直接:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[name=&amp;#39;qq_weib&amp;#39;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#sns_platform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好像跑题了. done&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Less watch mode</title>
    <id>http://tukki.github.io/develop-notes/2012/06/01/less-watch-mode</id>
    <updated>2012-06-01T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/06/01/less-watch-mode" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a class="reference external" href="http://lesscss.org/"&gt;Less&lt;/a&gt; 里面提到的watch mode一直没能用上(在开发域名上面运行), 也没去找那里出错了. 忙乎阿. 刚才再Google了下, 找到了解决方式.&lt;/p&gt;
&lt;p&gt;github上面提到个 &lt;a class="reference external" href="https://github.com/cloudhead/less.js/pull/679"&gt;pull request #679&lt;/a&gt;, 不过还处于open状态, 修改了源码. 解决方式一.&lt;/p&gt;
&lt;p&gt;然后, &lt;a class="reference external" href="http://www.paulsprangers.com/2011/04/quick-tip-less-js-in-development-and-watch-mode/"&gt;Less.js in development and watch mode&lt;/a&gt;. 原文提到的方式不靠谱, 反而评论提到了两个方式, 一个是修改源码, 等于把自己的开放域名注册到Less.js文件里面. 另外一个, Force init value of less.env var:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// Force init value of less.env var
var less = { env: ‘development’ };
// Less itself

// Watch
less.watch();
&lt;/pre&gt;
&lt;p&gt;需要在加载Less.js之前初始化env变量, 不如在非本地测试环境, 加载Less.js后判断 env 是否为 &lt;em&gt;development&lt;/em&gt; 而选择了不同的模式. 再手动watch也不能生效.&lt;/p&gt;
&lt;p&gt;ps. 可以用 less.poll 来控制watch频率&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- Fri Jun  1 00:43:06 CST 2012 --&amp;gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">using IPython magic-save</title>
    <id>http://tukki.github.io/develop-notes/2012/05/06/ipython-magic-save</id>
    <updated>2012-05-06T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/05/06/ipython-magic-save" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;利用ipython证明一段交互逻辑后, 想保存记录. 在stackoverflow找到 &lt;a class="reference external" href="http://stackoverflow.com/questions/947810/how-to-save-a-python-interactive-session"&gt;How to save a Python interactive session?&lt;/a&gt;, 然后知道IPython的 &lt;a class="reference external" href="http://ipython.org/ipython-doc/stable/api/generated/IPython.core.interactiveshell.html?highlight=save#IPython.core.interactiveshell.InteractiveShell.magic_save"&gt;magic-save&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Save a set of lines or a macro to a given filename.
Usage:
  %save [options] filename n1-n2 n3-n4 ... n5 .. n6 ...
&lt;/pre&gt;
&lt;p&gt;轻松保存记录到指定文件, 然后, 稍作编辑. 一个脚本大致成型.&lt;/p&gt;
&lt;p&gt;&amp;lt;Sun May  6 01:55:05 CST 2012&amp;gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://tukki.github.io/develop-notes/feed.atom">
    <title type="text">Seajs Anti-pattern</title>
    <id>http://tukki.github.io/develop-notes/2012/05/01/seajs-anti-pattern</id>
    <updated>2012-05-01T00:00:00Z</updated>
    <link href="http://tukki.github.io/develop-notes/2012/05/01/seajs-anti-pattern" />
    <author>
      <name>稻草人.L</name>
    </author>
    <content type="html">&lt;p&gt;以下纯属记录, 未经严格验证, 不应推广!!&lt;/p&gt;
&lt;div class="section" id="module"&gt;
&lt;h2&gt;非独立文件module&lt;/h2&gt;
&lt;p&gt;seajs的 &lt;a class="reference external" href="http://seajs.org/docs/module-definition.html#module-definition"&gt;Module Definition&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In SeaJS, any JavaScript file should be written in module format,
and files and modules are in one-to-one correspondence.
&lt;/pre&gt;
&lt;p&gt;但查看spm build 出来的文件, 其依旧遵从下面的模式, 只是, id是带域名/链接的构成.&lt;/p&gt;
&lt;blockquote&gt;
define(id?, dependencies?, factory);&lt;/blockquote&gt;
&lt;p&gt;所以, 可以在非独立js文件里面定义module, 像requirejs一样, 指定id和dependencies. 不过猜想, 在path中需要另外指定对应id的路径, 至于是不是必需, 待验证&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="require-nature-javascript-lib"&gt;
&lt;h2&gt;require nature javascript lib&lt;/h2&gt;
&lt;p&gt;不可否认Requirejs的作者 &lt;a class="reference external" href="https://github.com/jrburke"&gt;James Burke&lt;/a&gt; 的魅力, 说服jquery把AMD加到了代码是实默认支持中. 而在seajs, 要做到:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var $ = require(&amp;#39;jquery&amp;#39;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还需要额外对jquery源码进行一个封装. 其实, 自己还是蛮喜欢 write javascript the javascript way. 懒得对一个现成lib都进行一次封装. 将seajs这部分当成简单的包依赖管理来用, 直接 require('jquery'), 让其回归全局. 再直接用$来调用, 也是可行的.&lt;/p&gt;
&lt;p&gt;不过, 按seajs的设计来看, 属于坏习惯.&lt;/p&gt;
&lt;p&gt;&amp;lt;Tue May  1 01:34:37 CST 2012&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

